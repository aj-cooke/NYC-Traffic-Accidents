wts0 = matched_weights[data$treat==0]
for (i in 1:length(binary_covs)){
cov = binary_covs[i]
pre_match_mean <- round(tapply(data[,cov], data$treat, mean), 3) # 0, 1
post_match_mean <- round(c(weighted.mean(data[,cov][data$treat==0], wts0),
mean(data[,cov][data$treat==1])), 3) # 0, 1
pre_match_mean_diff <- round(diff(pre_match_mean), 3) # treat mean - control mean
post_match_mean_diff <- round(diff(post_match_mean), 3) # treat mean - control mean
balance <-
balance %>%
add_row(variable = cov,
mn1 = pre_match_mean[2], mn0 = pre_match_mean[1],
mn1.m = post_match_mean[2], mn0.m = post_match_mean[1],
diff = abs(pre_match_mean_diff), diff.m = abs(post_match_mean_diff),
ratio = 0, ratio.m = 0)
}
# check balance of continuous variables
for (i in 1:length(continuous_cov)){
cov = continuous_cov[i]
pre_match_mean <- round(tapply(data[,cov], data$treat, mean), 3) # 0, 1
post_match_mean <- round(c(weighted.mean(data[,cov][data$treat==0], wts0),
mean(data[,cov][data$treat==1])), 3) # 0, 1
pre_match_sd <- round(tapply(data[,cov], data$treat, sd), 3) # 0, 1
pre_match_mean_diff <- round(diff(pre_match_mean/pre_match_sd[2]), 3) # (treat mean - control mean)/sd of treatment group
post_match_mean_diff <- round(diff(post_match_mean/pre_match_sd[2]), 3) # (treat mean - control mean)/sd of treatment group
post_match_sd <- round(c(sqrt(weighted.mean((data[,cov][data$treat==0] - post_match_mean[1])^2,
wts0)), # sqrt(weight*(x-wm)^2/n)
sd(data[,cov][data$treat==1])), 3) # 0, 1
balance <-
balance %>%
add_row(variable = cov,
mn1 = pre_match_mean[2], mn0 = pre_match_mean[1],
mn1.m = post_match_mean[2], mn0.m = post_match_mean[1],
diff = abs(pre_match_mean_diff), diff.m = abs(post_match_mean_diff),
ratio = pre_match_sd[1]/pre_match_sd[2], ratio.m = post_match_sd[1]/post_match_sd[2])
}
return(balance)
}
# show balance function matches unit test here
balance_checking_model <-
glm(treat ~ bw + b.marr,
data = mydata,
family = "binomial")
ps_balance <- fitted(balance_checking_model)
match_balance <- matching(z=mydata$treat, score=ps_balance, replace=T)
check_balance(data = mydata,
binary_covs = c("b.marr"),
continuous_cov = c("bw"),
matched_weights = match_balance$cnts)
#print balance of all confounders
binary_covs = c("b.marr", "work.dur", "prenatal", "cig", "sex", "bwg",
"black", "hispanic", "hs", "ltcoll", "college")
continuous_cov = c("momage", "bw", "preterm", "dayskidh", "income")
check_all_balance <- check_balance(data = mydata,
binary_covs,
continuous_cov,
matched_weights = match1$cnts)
print(check_all_balance)
# final pscore model and matching code
ps_final <- glm(treat ~ .,
data = mydata[, -1],
family = "binomial")
ps_final <- predict(ps_final, type = c("response"))
match_final <- matching(z=mydata$treat, score=ps_final, replace=F)
# print balance
binary_covs = c("b.marr", "work.dur", "prenatal", "cig", "sex", "bwg",
"black", "hispanic", "hs", "ltcoll", "college")
continuous_cov = c("momage", "bw", "preterm", "dayskidh", "income")
check_balance(mydata, binary_covs, continuous_cov, match_final$cnts)
# overlap of p.score
cov <- colnames(mydata)[-c(1:2)]
plot_overlap_pScores(.data=mydata, treatment="treat", confounders=cov, pscores=ps_final)
data = mydata
control <- data %>% filter(treat == 0)
rep(control, times = weight[treat == 0])
# overlap of a covariate
weight <- match_final$cnts
rep(control, times = weight[treat == 0])
treat <- mydata$treat
rep(control, times = weight[treat == 0])
rep(control, time = weight[treat == 0])
rep(control, each = weight[treat == 0])
control <-
control %>%
mutate(count = weight) %>%
uncount(count)
control <- data %>% filter(treat == 0)
control %>%
mutate(count = weight[treat == 0]) %>%
uncount(count)
length(weight[treat == 0])
# overlap of a covariate
weight <- match_final$cnts
control %>%
mutate(count = weight[treat == 0]) %>%
uncount(count)
length(weight[treat == 0])
head(weight[treat == 0])
head(weight[treat == 0], 20)
length(control)
length(control$ppvtr.36)
control %>%
mutate(count = weight[treat == 0])
control_weight <- weight[treat == 0]
control <-
control %>%
mutate(count = control_weight) %>%
uncount(count)
View(control)
matched_data <-
mydata %>%
mutate(count = weight) %>%
uncount(count)
View(mydata)
# overlap of a covariate
weight <- match_final$cnts
matched_data <-
mydata %>%
mutate(count = weight) %>%
uncount(count)
plot_overlap_vars(.data=matched_data, treatment="treat", confounders="momage")
# overlap of another covariate
plot_overlap_vars(.data=matched_data, treatment="treat", confounders="preterm")
# final pscore model and matching code
ps_final <- glm(treat ~ momage+b.marr+work.dur+prenatal+cig+sex+bw+bwg+preterm*dayskidh+
income+black+hispanic+hs+ltcoll+college,
data = mydata[, -1],
family = "binomial")
ps_final <- predict(ps_final, type = c("response"))
match_final <- matching(z=mydata$treat, score=ps_final, replace=F)
# print balance
binary_covs = c("b.marr", "work.dur", "prenatal", "cig", "sex", "bwg",
"black", "hispanic", "hs", "ltcoll", "college")
continuous_cov = c("momage", "bw", "preterm", "dayskidh", "income")
check_balance(mydata, binary_covs, continuous_cov, match_final$cnts)
# final pscore model and matching code
ps_final <- glm(treat ~ momage*b.marr+work.dur+prenatal+cig+sex+bw+bwg+preterm+dayskidh+
income+black+hispanic+hs+ltcoll+college,
data = mydata[, -1],
family = "binomial")
ps_final <- predict(ps_final, type = c("response"))
match_final <- matching(z=mydata$treat, score=ps_final, replace=F)
# print balance
binary_covs = c("b.marr", "work.dur", "prenatal", "cig", "sex", "bwg",
"black", "hispanic", "hs", "ltcoll", "college")
continuous_cov = c("momage", "bw", "preterm", "dayskidh", "income")
check_balance(mydata, binary_covs, continuous_cov, match_final$cnts)
# final pscore model and matching code
ps_final <- glm(treat ~ momage*work.dur+b.marr+prenatal+cig+sex+bw+bwg+preterm+dayskidh+
income+black+hispanic+hs+ltcoll+college,
data = mydata[, -1],
family = "binomial")
ps_final <- predict(ps_final, type = c("response"))
match_final <- matching(z=mydata$treat, score=ps_final, replace=F)
# print balance
binary_covs = c("b.marr", "work.dur", "prenatal", "cig", "sex", "bwg",
"black", "hispanic", "hs", "ltcoll", "college")
continuous_cov = c("momage", "bw", "preterm", "dayskidh", "income")
check_balance(mydata, binary_covs, continuous_cov, match_final$cnts)
# final pscore model and matching code
ps_final <- glm(treat ~ .,
data = mydata[, -1],
family = "binomial")
ps_final <- predict(ps_final, type = c("response"))
match_final <- matching(z=mydata$treat, score=ps_final, replace=F)
# print balance
binary_covs = c("b.marr", "work.dur", "prenatal", "cig", "sex", "bwg",
"black", "hispanic", "hs", "ltcoll", "college")
continuous_cov = c("momage", "bw", "preterm", "dayskidh", "income")
check_balance(mydata, binary_covs, continuous_cov, match_final$cnts)
# overlap of p.score
cov <- colnames(mydata)[-c(1:2)]
plot_overlap_pScores(.data=mydata, treatment="treat", confounders=cov, pscores=ps_final)
# overlap of a covariate
weight <- match_final$cnts
matched_data <-
mydata %>%
mutate(count = weight) %>%
uncount(count)
plot_overlap_vars(.data=matched_data, treatment="treat", confounders="momage")
View(matched_data)
setwd("/Users/daixinming/Documents/Graduate_School/2022_Fall/Causal_Inference/CI_assignments/CI_HW4")
# IPTW overlap plot
cov <- colnames(mydata)[-c(1:2)]
plot_overlap_pScores(.data=mydata, treatment="treat", confounders=cov, pscores=ps_final)
library(survey)
?svydesign
design <- svydesign(ids=~1, weights=IPTW_weight, data=mydata)
library(tidyverse)
library(arm)
library(plotBart)
library(ranger)
# setwd("/Users/daixinming/Documents/Graduate_School/2022_Fall/Causal_Inference/CI_assignments/CI_HW4")
IHDP <- read.csv("IHDP.csv")
# select confounders
mydata <-
IHDP %>%
dplyr::select(ppvtr.36, treat, momage, b.marr, work.dur, prenatal, cig, sex, bw, bwg, preterm,
dayskidh, income, black, hispanic, hs, ltcoll, college) %>%
filter(bw < 3000) # reduce data to include only observations for children whose birthweight is less than 3000 grams
# p.score model
ps_model1 <- glm(treat ~ .,
data = mydata[, -1],
family = "binomial")
ps1 <- predict(ps_model1, type = c("response"))
# 1 to 1 matching
match1 <- matching(z=mydata$treat, score=ps1, replace=T)
# overlap of p.score
cov <- colnames(mydata)[-c(1:2)]
plot_overlap_pScores(.data=mydata, treatment="treat", confounders=cov, pscores=ps1)
# overlap of one covariate
plot_overlap_vars(.data=mydata, treatment="treat", confounders="momage")
# overlap of another covariate
plot_overlap_vars(.data=mydata, treatment="treat", confounders="preterm")
# build you function here
check_balance <- function(data, binary_covs, continuous_cov, matched_weights){
# data (data.frame): data
# binary_covs (character): name of the binary covariates
# continuous_cov (character): name of the continuous variables
# matched_weights (vector): weights after matching
# returns (data.frame): the data frame to check balance
balance <- tibble(variable = character(),
mn1 = numeric(),
mn0 = numeric(),
mn1.m = numeric(),
mn0.m = numeric(),
diff = numeric(),
diff.m = numeric(),
ratio = numeric(),
ratio.m = numeric())
# check balance of binary variables
wts0 = matched_weights[data$treat==0]
for (i in 1:length(binary_covs)){
cov = binary_covs[i]
pre_match_mean <- round(tapply(data[,cov], data$treat, mean), 3) # 0, 1
post_match_mean <- round(c(weighted.mean(data[,cov][data$treat==0], wts0),
mean(data[,cov][data$treat==1])), 3) # 0, 1
pre_match_mean_diff <- round(diff(pre_match_mean), 3) # treat mean - control mean
post_match_mean_diff <- round(diff(post_match_mean), 3) # treat mean - control mean
balance <-
balance %>%
add_row(variable = cov,
mn1 = pre_match_mean[2], mn0 = pre_match_mean[1],
mn1.m = post_match_mean[2], mn0.m = post_match_mean[1],
diff = abs(pre_match_mean_diff), diff.m = abs(post_match_mean_diff),
ratio = 0, ratio.m = 0)
}
# check balance of continuous variables
for (i in 1:length(continuous_cov)){
cov = continuous_cov[i]
pre_match_mean <- round(tapply(data[,cov], data$treat, mean), 3) # 0, 1
post_match_mean <- round(c(weighted.mean(data[,cov][data$treat==0], wts0),
mean(data[,cov][data$treat==1])), 3) # 0, 1
pre_match_sd <- round(tapply(data[,cov], data$treat, sd), 3) # 0, 1
pre_match_mean_diff <- round(diff(pre_match_mean/pre_match_sd[2]), 3) # (treat mean - control mean)/sd of treatment group
post_match_mean_diff <- round(diff(post_match_mean/pre_match_sd[2]), 3) # (treat mean - control mean)/sd of treatment group
post_match_sd <- round(c(sqrt(weighted.mean((data[,cov][data$treat==0] - post_match_mean[1])^2,
wts0)), # sqrt(weight*(x-wm)^2/n)
sd(data[,cov][data$treat==1])), 3) # 0, 1
balance <-
balance %>%
add_row(variable = cov,
mn1 = pre_match_mean[2], mn0 = pre_match_mean[1],
mn1.m = post_match_mean[2], mn0.m = post_match_mean[1],
diff = abs(pre_match_mean_diff), diff.m = abs(post_match_mean_diff),
ratio = pre_match_sd[1]/pre_match_sd[2], ratio.m = post_match_sd[1]/post_match_sd[2])
}
return(balance)
}
# show balance function matches unit test here
balance_checking_model <-
glm(treat ~ bw + b.marr,
data = mydata,
family = "binomial")
ps_balance <- fitted(balance_checking_model)
match_balance <- matching(z=mydata$treat, score=ps_balance, replace=T)
check_balance(data = mydata,
binary_covs = c("b.marr"),
continuous_cov = c("bw"),
matched_weights = match_balance$cnts)
#print balance of all confounders
binary_covs = c("b.marr", "work.dur", "prenatal", "cig", "sex", "bwg",
"black", "hispanic", "hs", "ltcoll", "college")
continuous_cov = c("momage", "bw", "preterm", "dayskidh", "income")
check_all_balance <- check_balance(data = mydata,
binary_covs,
continuous_cov,
matched_weights = match1$cnts)
print(check_all_balance)
# final pscore model and matching code
ps_final <- glm(treat ~ .,
data = mydata[, -1],
family = "binomial")
ps_final <- predict(ps_final, type = c("response"))
match_final <- matching(z=mydata$treat, score=ps_final, replace=F)
# print balance
binary_covs = c("b.marr", "work.dur", "prenatal", "cig", "sex", "bwg",
"black", "hispanic", "hs", "ltcoll", "college")
continuous_cov = c("momage", "bw", "preterm", "dayskidh", "income")
check_balance(mydata, binary_covs, continuous_cov, match_final$cnts)
# overlap of p.score
cov <- colnames(mydata)[-c(1:2)]
plot_overlap_pScores(.data=mydata, treatment="treat", confounders=cov, pscores=ps_final)
# overlap of a covariate
matched_data <-
mydata %>%
mutate(count = match_final$cnts) %>%
uncount(count)
plot_overlap_vars(.data=matched_data, treatment="treat", confounders="momage")
# overlap of another covariate
plot_overlap_vars(.data=matched_data, treatment="treat", confounders="preterm")
# estimate pscores with IPTW
# estimand is ATT
# the treated weights are 1s, and the control weights equal to \hat{e(x)}/(1-\hat{e(x)})
ex <- ps_final[mydata$treat == 0]
IPTW_weight = c(rep(1, sum(mydata$treat == 1)), ex/(1 - ex))
# IPTW overlap plot
cov <- colnames(mydata)[-c(1:2)]
plot_overlap_pScores(.data=mydata, treatment="treat", confounders=cov, pscores=ps_final)
# IPTW balance
binary_covs = c("b.marr", "work.dur", "prenatal", "cig", "sex", "bwg",
"black", "hispanic", "hs", "ltcoll", "college")
continuous_cov = c("momage", "bw", "preterm")
check_all_balance <- check_balance(data = mydata,
binary_covs,
continuous_cov,
matched_weights = IPTW_weight)
print(check_all_balance)
# outcome model using IPTW
# normalize use inverse logit?
ATT_IPTW <- lm(ppvtr.36 ~., data = mydata, weight = IPTW_weight)
design <- svydesign(ids=~1, weights=IPTW_weight, data=mydata)
svyglm(ppvtr.36 ~., design = design, data = mydata)
design <- svydesign(ids=~1, weights=~IPTW_weight, data=mydata)
svyglm(ppvtr.36 ~., design = design, data = mydata)
svyglm(ppvtr.36 ~ treat+momage+b.marr+work.dur+prenatal+cig+sex+bw+bwg+preterm+
dayskidh+income+black+hispanic+hs+ltcoll+college, design = design, data = mydata)
ATT_IPTW <- lm(ppvtr.36 ~., data = mydata, weight = IPTW_weight)
att_IPTW_point <- ATT_IPTW$coefficients['treat']
att_IPTW_point
att_IPTW_se <- sqrt(diag(vcov(ATT_IPTW)))['treat']
att_IPTW_se
design <- svydesign(ids=~1, weights=~IPTW_weight, data=mydata)
ATT_IPTW <- svyglm(ppvtr.36 ~ treat+momage+b.marr+work.dur+prenatal+cig+sex+bw+bwg+preterm+
dayskidh+income+black+hispanic+hs+ltcoll+college, design = design, data = mydata)
ATT_IPTW
summary(ATT_IPTW)
# outcome model using IPTW
design <- svydesign(ids=~1, weights=~IPTW_weight, data=mydata)
summary_ATT_IPTW <- summary(ATT_IPTW)
summary_ATT_IPTW
summary_ATT_IPTW$coefficients
# outcome model using matching
design_match <- svydesign(ids=~1, weights=~match_final$cnts, data=mydata)
ATT_match <- svyglm(ppvtr.36 ~ treat+momage+b.marr+work.dur+prenatal+cig+sex+bw+bwg+preterm+
dayskidh+income+black+hispanic+hs+ltcoll+college,
design = design_match, data = mydata)
summary_ATT_match <- summary(ATT_match)
ATT_match <- svyglm(ppvtr.36 ~ treat+momage+b.marr+work.dur+prenatal+cig+sex+bw+bwg+preterm+
dayskidh+income+black+hispanic+hs+ltcoll+college,
design = design_match, data = mydata)
# outcome model using matching
design_match <- svydesign(ids=~1, weights=~match_final$cnts, data=mydata)
ATT_match <- svyglm(ppvtr.36 ~ treat+momage+b.marr+work.dur+prenatal+cig+sex+bw+bwg+preterm+
dayskidh+income+black+hispanic+hs+ltcoll+college,
design = design_match, data = mydata)
summary_ATT_match <- summary(ATT_match)
summary_ATT_match$coefficients
sum(mydata$hs[mydata$treat==0]*match_final$cnts[mydata$treat==0])/sum(match_final$cnts[mydata$treat==0])
0.422-0.283
0.422-0.283
0.283-0.362
0.928	-0.490
library(tidyverse)
library(arm)
library(plotBart)
library(ranger)
library(survey)
# setwd("/Users/daixinming/Documents/Graduate_School/2022_Fall/Causal_Inference/CI_assignments/CI_HW4")
IHDP <- read.csv("IHDP.csv")
# select confounders
mydata <-
IHDP %>%
dplyr::select(ppvtr.36, treat, momage, b.marr, work.dur, prenatal, cig, sex, bw, bwg, preterm,
dayskidh, income, black, hispanic, hs, ltcoll, college) %>%
filter(bw < 3000) # reduce data to include only observations for children whose birthweight is less than 3000 grams
# p.score model
ps_model1 <- glm(treat ~ .,
data = mydata[, -1],
family = "binomial")
ps1 <- predict(ps_model1, type = c("response"))
# 1 to 1 matching
match1 <- matching(z=mydata$treat, score=ps1, replace=T)
# overlap of p.score
cov <- colnames(mydata)[-c(1:2)]
plot_overlap_pScores(.data=mydata, treatment="treat", confounders=cov, pscores=ps1)
# overlap of one covariate
plot_overlap_vars(.data=mydata, treatment="treat", confounders="momage")
# overlap of another covariate
plot_overlap_vars(.data=mydata, treatment="treat", confounders="preterm")
# build you function here
check_balance <- function(data, binary_covs, continuous_cov, matched_weights){
# data (data.frame): data
# binary_covs (character): name of the binary covariates
# continuous_cov (character): name of the continuous variables
# matched_weights (vector): weights after matching
# returns (data.frame): the data frame to check balance
balance <- tibble(variable = character(),
mn1 = numeric(),
mn0 = numeric(),
mn1.m = numeric(),
mn0.m = numeric(),
diff = numeric(),
diff.m = numeric(),
ratio = numeric(),
ratio.m = numeric())
# check balance of binary variables
wts0 = matched_weights[data$treat==0]
for (i in 1:length(binary_covs)){
cov = binary_covs[i]
pre_match_mean <- round(tapply(data[,cov], data$treat, mean), 3) # 0, 1
post_match_mean <- round(c(weighted.mean(data[,cov][data$treat==0], wts0),
mean(data[,cov][data$treat==1])), 3) # 0, 1
pre_match_mean_diff <- round(diff(pre_match_mean), 3) # treat mean - control mean
post_match_mean_diff <- round(diff(post_match_mean), 3) # treat mean - control mean
balance <-
balance %>%
add_row(variable = cov,
mn1 = pre_match_mean[2], mn0 = pre_match_mean[1],
mn1.m = post_match_mean[2], mn0.m = post_match_mean[1],
diff = abs(pre_match_mean_diff), diff.m = abs(post_match_mean_diff),
ratio = 0, ratio.m = 0)
}
# check balance of continuous variables
for (i in 1:length(continuous_cov)){
cov = continuous_cov[i]
pre_match_mean <- round(tapply(data[,cov], data$treat, mean), 3) # 0, 1
post_match_mean <- round(c(weighted.mean(data[,cov][data$treat==0], wts0),
mean(data[,cov][data$treat==1])), 3) # 0, 1
pre_match_sd <- round(tapply(data[,cov], data$treat, sd), 3) # 0, 1
pre_match_mean_diff <- round(diff(pre_match_mean/pre_match_sd[2]), 3) # (treat mean - control mean)/sd of treatment group
post_match_mean_diff <- round(diff(post_match_mean/pre_match_sd[2]), 3) # (treat mean - control mean)/sd of treatment group
post_match_sd <- round(c(sqrt(weighted.mean((data[,cov][data$treat==0] - post_match_mean[1])^2,
wts0)), # sqrt(weight*(x-wm)^2/n)
sd(data[,cov][data$treat==1])), 3) # 0, 1
balance <-
balance %>%
add_row(variable = cov,
mn1 = pre_match_mean[2], mn0 = pre_match_mean[1],
mn1.m = post_match_mean[2], mn0.m = post_match_mean[1],
diff = abs(pre_match_mean_diff), diff.m = abs(post_match_mean_diff),
ratio = pre_match_sd[1]/pre_match_sd[2], ratio.m = post_match_sd[1]/post_match_sd[2])
}
return(balance)
}
# show balance function matches unit test here
balance_checking_model <-
glm(treat ~ bw + b.marr,
data = mydata,
family = "binomial")
ps_balance <- fitted(balance_checking_model)
match_balance <- matching(z=mydata$treat, score=ps_balance, replace=T)
check_balance(data = mydata,
binary_covs = c("b.marr"),
continuous_cov = c("bw"),
matched_weights = match_balance$cnts)
#print balance of all confounders
binary_covs = c("b.marr", "work.dur", "prenatal", "cig", "sex", "bwg",
"black", "hispanic", "hs", "ltcoll", "college")
continuous_cov = c("momage", "bw", "preterm", "dayskidh", "income")
check_all_balance <- check_balance(data = mydata,
binary_covs,
continuous_cov,
matched_weights = match1$cnts)
print(check_all_balance)
# final pscore model and matching code
ps_final <- glm(treat ~ .,
data = mydata[, -1],
family = "binomial")
ps_final <- predict(ps_final, type = c("response"))
match_final <- matching(z=mydata$treat, score=ps_final, replace=T)
# print balance
binary_covs = c("b.marr", "work.dur", "prenatal", "cig", "sex", "bwg",
"black", "hispanic", "hs", "ltcoll", "college")
continuous_cov = c("momage", "bw", "preterm", "dayskidh", "income")
check_balance(mydata, binary_covs, continuous_cov, match_final$cnts)
# overlap of p.score
cov <- colnames(mydata)[-c(1:2)]
plot_overlap_pScores(.data=mydata, treatment="treat", confounders=cov, pscores=ps_final)
# overlap of p.score
matched_data <-
mydata %>%
mutate(count = match_final$cnts) %>%
uncount(count)
cov <- colnames(mydata)[-c(1:2)]
plot_overlap_pScores(.data=matched_data, treatment="treat", confounders=cov, pscores=ps_final)
View(matched_data)
# overlap of p.score
matched_data <-
mydata %>%
mutate(pscores=ps_final) %>%
mutate(count = match_final$cnts) %>%
uncount(count)
cov <- colnames(mydata)[-c(1:2)]
plot_overlap_pScores(.data=matched_data, treatment="treat", confounders=cov, pscores=matched_data$ps_final)
plot_overlap_pScores(.data=matched_data, treatment="treat", confounders=cov, pscores=matched_data$ps_final)
cov <- colnames(matched_data)[-c(1:2)]
plot_overlap_pScores(.data=matched_data, treatment="treat", confounders=cov, pscores=matched_data$ps_final)
# overlap of a covariate
plot_overlap_vars(.data=matched_data, treatment="treat", confounders="momage")
# overlap of another covariate
plot_overlap_vars(.data=matched_data, treatment="treat", confounders="preterm")
